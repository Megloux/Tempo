import React, { useState, useEffect, useCallback } from 'react';
import { useClassSchedule } from '../context/ClassScheduleContext';
import { useToast } from '../context/ToastContext';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';
import { debounce } from '../utils/helpers';

const InstructorManagement = () => {
  const { 
    instructors, 
    updateInstructor, 
    deleteInstructor,
    CLASS_TYPES, 
    DAYS_OF_WEEK, 
    CLASS_TIMES, 
    setInstructorAvailability: updateInstructorAvailability,
    getInstructorClasses,
    schedule,
    undoLastChange,
    hasSchedulingConflict,
    validateInstructorData
  } = useClassSchedule();
  
  // Toast notifications
  const toast = useToast();
  
  // State for instructor management
  const [selectedInstructor, setSelectedInstructor] = useState('');
  const [instructorAvailability, setInstructorAvailability] = useState({});
  const [showEditModal, setShowEditModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [editingInstructor, setEditingInstructor] = useState(null);
  const [instructorToDelete, setInstructorToDelete] = useState(null);
  
  // Mobile responsiveness state
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
  const [showMobileFilters, setShowMobileFilters] = useState(false);
  
  // Handle window resize for responsive design
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  
  // Helper function to check if a class is scheduled at a specific day, type, and time
  const isClassScheduled = (day, type, time) => {
    return schedule[day]?.[type]?.[time] !== undefined && schedule[day][type][time] !== null;
  };
  
  // Load instructor's availability when selected
  const handleInstructorSelect = useCallback((instructorId) => {
    setSelectedInstructor(instructorId);
    
    if (instructorId) {
      const instructor = instructors.find(i => i.id === instructorId);
      if (instructor) {
        // Initialize availability grid with all slots unavailable by default
        const availabilityGrid = {};
        // Initialize class type preferences grid
        const classTypeGrid = {};
        
        DAYS_OF_WEEK.forEach(day => {
          availabilityGrid[day] = {};
          classTypeGrid[day] = {};
          CLASS_TIMES.forEach(time => {
            // Default to unavailable
            availabilityGrid[day][time] = false;
            // Default to first class type the instructor can teach
            classTypeGrid[day][time] = instructor.classTypes[0] || '';
          });
        });
        
        // Mark slots as available based on instructor's availability
        // Show ALL availability slots without filtering based on scheduled classes
        if (instructor.availability && instructor.availability.length > 0) {
          // If we have explicit availability data, use it
          instructor.availability.forEach(slot => {
            const [day, time] = slot.split('-');
            if (availabilityGrid[day] && CLASS_TIMES.includes(time)) {
              // Mark this slot as available
              availabilityGrid[day][time] = true;
              
              // Set class type preference if available
              if (instructor.classTypePreferences && instructor.classTypePreferences[slot]) {
                classTypeGrid[day][time] = instructor.classTypePreferences[slot];
              }
            }
          });
        } else if (instructor.unavailability && instructor.unavailability.slots) {
          // Fallback to using unavailability data if no explicit availability
          DAYS_OF_WEEK.forEach(day => {
            CLASS_TIMES.forEach(time => {
              const slot = `${day}-${time}`;
              const isUnavailable = instructor.unavailability.slots.includes(slot);
              availabilityGrid[day][time] = !isUnavailable;
              
              // Set class type preference if available
              if (!isUnavailable && instructor.classTypePreferences && instructor.classTypePreferences[slot]) {
                classTypeGrid[day][time] = instructor.classTypePreferences[slot];
              }
            });
          });
        }
        
        setInstructorAvailability(availabilityGrid);
        setInstructorClassTypes(classTypeGrid);
        
        // Show success message
        toast.info(`Loaded availability for ${instructor.name}`);
      }
    }
  }, [instructors, DAYS_OF_WEEK, CLASS_TIMES, toast]);
  
  // State for tracking class type assignments
  const [instructorClassTypes, setInstructorClassTypes] = useState({});
  
  // Initialize class type assignments when instructor is selected
  useEffect(() => {
    if (selectedInstructor) {
      const instructor = instructors.find(i => i.id === selectedInstructor);
      if (instructor) {
        // Initialize class type assignments
        const classTypeAssignments = {};
        DAYS_OF_WEEK.forEach(day => {
          classTypeAssignments[day] = {};
          CLASS_TIMES.forEach(time => {
            const slot = `${day}-${time}`;
            // FIXED: Properly initialize with saved preferences instead of defaulting to first class type
            if (instructor.classTypePreferences && instructor.classTypePreferences[slot]) {
              classTypeAssignments[day][time] = instructor.classTypePreferences[slot];
            } else {
              // Default to first class type the instructor can teach if no preference is saved
              classTypeAssignments[day][time] = instructor.classTypes[0] || '';
            }
          });
        });
        setInstructorClassTypes(classTypeAssignments);
      }
    }
  }, [selectedInstructor, instructors]);
  
  // Handle availability checkbox change
  const handleAvailabilityChange = (day, time, isAvailable) => {
    // Update local state only (don't update context until save)
    setInstructorAvailability(prev => ({
      ...prev,
      [day]: {
        ...prev[day],
        [time]: isAvailable
      }
    }));
  };
  
  // Handle class type change for a specific time slot
  const handleClassTypeChange = (day, time, classType) => {
    setInstructorClassTypes(prev => ({
      ...prev,
      [day]: {
        ...prev[day],
        [time]: classType
      }
    }));
  };
  
  // Get class type color for checkboxes
  const getClassTypeColor = (type) => {
    switch(type) {
      case 'Lagree':
        return 'text-green-600 border-green-600';
      case 'Boxing':
        return 'text-red-600 border-red-600';
      case 'Strength':
        return 'text-blue-600 border-blue-600';
      case 'Stretch':
        return 'text-yellow-600 border-yellow-600';
      case 'PT':
        return 'text-purple-600 border-purple-600';
      default:
        return 'text-gray-600 border-gray-600';
    }
  };
  
  // Save all availability changes at once
  const saveAvailability = () => {
    if (!selectedInstructor) return;
    
    // Convert the availability grid to an array of available slots
    const availabilitySlots = [];
    // Track class type preferences for each available slot
    const classTypePreferences = {};
    
    // Process the availability grid
    Object.entries(instructorAvailability).forEach(([day, times]) => {
      Object.entries(times).forEach(([time, isAvailable]) => {
        if (isAvailable) {
          const slotKey = `${day}-${time}`;
          availabilitySlots.push(slotKey);
          
          // Store class type preference for this slot
          const classType = instructorClassTypes[day]?.[time] || '';
          if (classType) {
            classTypePreferences[slotKey] = classType;
          }
        }
      });
    });
    
    // Get the current instructor
    const instructor = instructors.find(i => i.id === selectedInstructor);
    if (!instructor) {
      toast.error('Instructor not found');
      return;
    }
    
    // Create updated instructor with new availability and class type preferences
    const updatedInstructor = {
      ...instructor,
      availability: availabilitySlots,
      classTypePreferences: classTypePreferences
    };
    
    // Validate the data before saving
    const validatedInstructor = validateInstructorData(updatedInstructor);
    
    // Update the instructor
    const success = updateInstructor(selectedInstructor, validatedInstructor);
    
    if (success) {
      // Ensure class type selections are preserved in the UI
      setInstructorClassTypes({...instructorClassTypes});
      
      // Show success message with toast instead of alert
      toast.success(`Availability for ${instructor.name} has been saved successfully`);
    } else {
      toast.error('Failed to save instructor availability');
    }
  };
  
  // Get instructor's assigned classes
  const getAssignedClassesCount = (instructorId) => {
    return getInstructorClasses(instructorId).length;
  };
  
  // Calculate instructor workload percentage
  const getWorkloadPercentage = (instructorId) => {
    const instructor = instructors.find(i => i.id === instructorId);
    if (!instructor) return 0;
    
    const assignedClasses = getAssignedClassesCount(instructorId);
    const maxClasses = instructor.maxClasses;
    
    return Math.round((assignedClasses / maxClasses) * 100);
  };
  
  // Open edit instructor modal
  const openEditModal = (instructor) => {
    setEditingInstructor({
      ...instructor,
      classTypes: [...instructor.classTypes] // Create a copy to avoid reference issues
    });
    setShowEditModal(true);
  };
  
  // Close edit instructor modal
  const closeEditModal = () => {
    setShowEditModal(false);
    setEditingInstructor(null);
  };
  
  // Handle edit instructor form changes
  const handleEditInstructorChange = (e) => {
    const { name, value, type, checked } = e.target;
    
    if (type === 'checkbox' && name.startsWith('classTypes-')) {
      const classType = name.replace('classTypes-', '');
      
      setEditingInstructor(prev => {
        const updatedClassTypes = checked
          ? [...prev.classTypes, classType]
          : prev.classTypes.filter(type => type !== classType);
          
        return { ...prev, classTypes: updatedClassTypes };
      });
    } else if (type === 'number') {
      setEditingInstructor(prev => ({
        ...prev,
        [name]: parseInt(value, 10) || 0
      }));
    } else {
      setEditingInstructor(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };
  
  // Save edited instructor
  const saveInstructor = () => {
    if (editingInstructor) {
      updateInstructor(editingInstructor.id, editingInstructor);
      closeEditModal();
    }
  };
  
  // Open delete confirmation modal
  const openDeleteModal = (instructor) => {
    setInstructorToDelete(instructor);
    setShowDeleteModal(true);
  };
  
  // Close delete confirmation modal
  const closeDeleteModal = () => {
    setShowDeleteModal(false);
    setInstructorToDelete(null);
  };
  
  // Confirm and delete instructor
  const confirmDeleteInstructor = () => {
    if (instructorToDelete) {
      deleteInstructor(instructorToDelete.id);
      if (selectedInstructor === instructorToDelete.id) {
        setSelectedInstructor('');
        setInstructorAvailability({});
      }
      closeDeleteModal();
    }
  };
  
  // Analytics functions
  const getInstructorWorkload = () => {
    const workload = {};
    
    // Initialize workload counters for each instructor
    instructors.forEach(instructor => {
      workload[instructor.id] = {
        name: instructor.name,
        id: instructor.id,
        total: 0,
        Lagree: 0,
        Strength: 0,
        Boxing: 0,
        Stretch: 0,
        PT: 0
      };
    });
    
    // Count classes for each instructor
    instructors.forEach(instructor => {
      const classes = getInstructorClasses(instructor.id);
      if (classes && classes.length > 0) {
        classes.forEach(classInfo => {
          workload[instructor.id].total += 1;
          workload[instructor.id][classInfo.type] += 1;
        });
      }
    });
    
    return Object.values(workload).sort((a, b) => b.total - a.total);
  };
  
  // Get classes by day of week for each instructor
  const getClassesByDayOfWeek = (instructorId) => {
    const dayWorkload = {
      Mon: { total: 0, Lagree: 0, Strength: 0, Boxing: 0, Stretch: 0, PT: 0 },
      Tues: { total: 0, Lagree: 0, Strength: 0, Boxing: 0, Stretch: 0, PT: 0 },
      Wed: { total: 0, Lagree: 0, Strength: 0, Boxing: 0, Stretch: 0, PT: 0 },
      Thu: { total: 0, Lagree: 0, Strength: 0, Boxing: 0, Stretch: 0, PT: 0 },
      Fri: { total: 0, Lagree: 0, Strength: 0, Boxing: 0, Stretch: 0, PT: 0 },
      Sat: { total: 0, Lagree: 0, Strength: 0, Boxing: 0, Stretch: 0, PT: 0 },
      Sun: { total: 0, Lagree: 0, Strength: 0, Boxing: 0, Stretch: 0, PT: 0 }
    };
    
    // Get all classes for this instructor
    const classes = getInstructorClasses(instructorId);
    
    // Count classes by day and type
    if (classes && classes.length > 0) {
      classes.forEach(classInfo => {
        dayWorkload[classInfo.day].total += 1;
        dayWorkload[classInfo.day][classInfo.type] += 1;
      });
    }
    
    // Convert to array format for charts
    return Object.entries(dayWorkload).map(([day, counts]) => ({
  
  return Object.values(workload).sort((a, b) => b.total - a.total);
};

// Get classes by day of week for each instructor
const getClassesByDayOfWeek = (instructorId) => {
  const dayWorkload = {
    Mon: { total: 0, Lagree: 0, Strength: 0, Boxing: 0, Stretch: 0, PT: 0 },
    Tues: { total: 0, Lagree: 0, Strength: 0, Boxing: 0, Stretch: 0, PT: 0 },
    Wed: { total: 0, Lagree: 0, Strength: 0, Boxing: 0, Stretch: 0, PT: 0 },
    Thu: { total: 0, Lagree: 0, Strength: 0, Boxing: 0, Stretch: 0, PT: 0 },
    Fri: { total: 0, Lagree: 0, Strength: 0, Boxing: 0, Stretch: 0, PT: 0 },
    Sat: { total: 0, Lagree: 0, Strength: 0, Boxing: 0, Stretch: 0, PT: 0 },
    Sun: { total: 0, Lagree: 0, Strength: 0, Boxing: 0, Stretch: 0, PT: 0 }
  };
  
  // Get all classes for this instructor
  const classes = getInstructorClasses(instructorId);
  
  // Count classes by day and type
  if (classes && classes.length > 0) {
    classes.forEach(classInfo => {
      dayWorkload[classInfo.day].total += 1;
      dayWorkload[classInfo.day][classInfo.type] += 1;
    });
  }
  
  // Convert to array format for charts
  return Object.entries(dayWorkload).map(([day, counts]) => ({
    day,
    ...counts
  }));
};

// Get color for charts
const getChartColor = (type) => {
  switch(type) {
    case 'Lagree':
      return '#10B981'; // green-500
    case 'Strength':
      return '#3B82F6'; // blue-500
    case 'Boxing':
      return '#EF4444'; // red-500
    case 'Stretch':
      return '#F59E0B'; // amber-500
    case 'PT':
      return '#8B5CF6'; // purple-500
    default:
      return '#6B7280'; // gray-500
  }
};

// Get color for instructor checkboxes
const getClassTypeColor = (type) => {
  switch(type) {
    case 'Lagree':
      return 'text-green-600 border-green-600';
    case 'Boxing':
      return 'text-red-600 border-red-600';
    case 'Strength':
      return 'text-blue-600 border-blue-600';
    case 'Stretch':
      return 'text-yellow-600 border-yellow-600';
    case 'PT':
      return 'text-purple-600 border-purple-600';
    default:
      return 'text-gray-600 border-gray-600';
  }
};

// Get color for instructor bars
const getInstructorColor = (instructorId) => {
  switch(instructorId) {
    case 'dayron':
      return '#4B5563'; // gray-600
    case 'michelle':
      return '#F87171'; // red-400
    case 'taylor':
      return '#34D399'; // green-400
    case 'aseel':
      return '#A78BFA'; // purple-400
    case 'allison':
      return '#FBBF24'; // yellow-400
    case 'megan':
      return '#FB923C'; // orange-400
    case 'erin':
      return '#2DD4BF'; // teal-400
    case 'sandhya':
      return '#F472B6'; // pink-400
    case 'jess':
      return '#60A5FA'; // blue-400
    default:
      return (
        <div className="max-w-7xl mx-auto bg-white p-4 md:p-6 rounded-lg shadow-md">
          <h2 className="text-2xl font-bold mb-4 md:mb-6 text-center text-blue-800">Instructor Management</h2>
          
          {/* Mobile view controls */}
          {isMobile && (
            <div className="mb-4 flex flex-col space-y-2">
              <select
                className="w-full p-2 border rounded"
                value={selectedInstructor}
                onChange={(e) => handleInstructorSelect(e.target.value)}
              >
                <option value="">Select an instructor</option>
                {instructors.map(instructor => (
                  <option key={instructor.id} value={instructor.id}>
                    {instructor.name} ({getAssignedClassesCount(instructor.id)} classes)
                  </option>
                ))}
              </select>
              
              {selectedInstructor && (
                <div className="flex justify-between gap-2">
                  <button
                    onClick={() => openEditModal(instructors.find(i => i.id === selectedInstructor))}
                    className="flex-1 py-2 px-3 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 transition-colors"
                  >
                    Edit
                  </button>
                  
                  <button
                    onClick={saveAvailability}
                    className="flex-1 py-2 px-3 bg-green-600 text-white text-sm rounded hover:bg-green-700 transition-colors"
                  >
                    Save
                  </button>
                  
                  <button
                    onClick={() => setShowMobileFilters(!showMobileFilters)}
                    className="flex-1 py-2 px-3 bg-gray-600 text-white text-sm rounded hover:bg-gray-700 transition-colors"
                  >
                    {showMobileFilters ? 'Hide Stats' : 'Show Stats'}
                  </button>
                </div>
              )}
              
              {/* Mobile stats view */}
              {selectedInstructor && showMobileFilters && (
                <div className="mt-2 p-3 bg-gray-50 rounded-md">
                  <h4 className="text-md font-semibold mb-2 text-blue-700">Instructor Stats</h4>
                  
                  <div className="space-y-2">
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Assigned Classes:</span>
                      <span className="font-semibold">{getAssignedClassesCount(selectedInstructor)}</span>
                    </div>
                    
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Workload:</span>
                      <span className="font-semibold">{getWorkloadPercentage(selectedInstructor)}%</span>
                    </div>
                    
                    <div className="w-full bg-gray-200 rounded-full h-2.5">
                      <div 
                        className={`h-2.5 rounded-full ${getWorkloadPercentage(selectedInstructor) > 90 ? 'bg-red-600' : 'bg-blue-600'}`}
                        style={{ width: `${getWorkloadPercentage(selectedInstructor)}%` }}
                      ></div>
                    </div>
                    
                    <button
                      onClick={() => openDeleteModal(instructors.find(i => i.id === selectedInstructor))}
                      className="w-full mt-2 py-2 px-3 bg-red-600 text-white text-sm rounded hover:bg-red-700 transition-colors"
                    >
                      Delete Instructor
                    </button>
                    
                    <button
                      onClick={undoLastChange}
                      className="w-full py-2 px-3 bg-yellow-600 text-white text-sm rounded hover:bg-yellow-700 transition-colors"
                    >
                      Undo Last Change
                    </button>
                  </div>
                </div>
              )}
            </div>
          )}
          
          {/* Instructor list for non-mobile */}
          {!isMobile && (
            <div className="mb-8">
              <h3 className="text-lg font-semibold mb-4">All Instructors</h3>
              
              <div className="overflow-x-auto">
                <table className="min-w-full border">
                  <thead>
                    <tr className="bg-gray-200">
                      <th className="py-3 px-4 border-b">ID</th>
                      <th className="py-3 px-4 border-b">Name</th>
                      <th className="py-3 px-4 border-b">Email</th>
                      <th className="py-3 px-4 border-b">Class Types</th>
                      <th className="py-3 px-4 border-b text-center">Block Size</th>
                      <th className="py-3 px-4 border-b text-center">Min Classes</th>
                      <th className="py-3 px-4 border-b text-center">Max Classes</th>
                      <th className="py-3 px-4 border-b">Workload</th>
                      <th className="py-3 px-4 border-b text-center">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {instructors.map(instructor => (
                      <tr 
                        key={instructor.id} 
                        className="hover:bg-gray-50"
                      >
                        <td className="py-3 px-4 border-b cursor-pointer" onClick={() => handleInstructorSelect(instructor.id)}>{instructor.id}</td>
                        <td className="py-3 px-4 border-b cursor-pointer" onClick={() => handleInstructorSelect(instructor.id)}>{instructor.name}</td>
                        <td className="py-3 px-4 border-b cursor-pointer" onClick={() => handleInstructorSelect(instructor.id)}>{instructor.email}</td>
                        <td className="py-3 px-4 border-b cursor-pointer" onClick={() => handleInstructorSelect(instructor.id)}>{instructor.classTypes.join(', ')}</td>
                        <td className="py-3 px-4 border-b text-center cursor-pointer" onClick={() => handleInstructorSelect(instructor.id)}>{instructor.blockSize}</td>
                        <td className="py-3 px-4 border-b text-center cursor-pointer" onClick={() => handleInstructorSelect(instructor.id)}>{instructor.minClasses}</td>
                        <td className="py-3 px-4 border-b text-center cursor-pointer" onClick={() => handleInstructorSelect(instructor.id)}>{instructor.maxClasses}</td>
                        <td className="py-3 px-4 border-b cursor-pointer" onClick={() => handleInstructorSelect(instructor.id)}>
                          <div className="flex items-center">
                            <div className="w-full bg-gray-200 rounded-full h-2.5">
                              <div 
                                className={`h-2.5 rounded-full ${
                                  getWorkloadPercentage(instructor.id) > 90 ? 'bg-red-600' :
                                  getWorkloadPercentage(instructor.id) > 70 ? 'bg-yellow-500' :
                                  'bg-green-600'
                                }`}
                                style={{ width: `${getWorkloadPercentage(instructor.id)}%` }}
                              ></div>
                            </div>
                            <span className="ml-2 text-sm">
                              {getAssignedClassesCount(instructor.id)}/{instructor.maxClasses}
                            </span>
                          </div>
                        </td>
                        <td className="py-3 px-4 border-b text-center">
                          <div className="flex justify-center space-x-2">
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                openEditModal(instructor);
                              }}
                              className="bg-blue-500 hover:bg-blue-600 text-white py-1 px-3 rounded text-sm"
                            >
                              Edit
                            </button>
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                openDeleteModal(instructor);
                              }}
                              className="bg-red-500 hover:bg-red-600 text-white py-1 px-3 rounded text-sm"
                            >
                              Delete
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}
          
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 md:gap-6">
            {/* Desktop Instructor Selection */}
            {!isMobile && (
              <div className="md:col-span-1 bg-gray-50 p-4 rounded-md">
                <h3 className="text-lg font-semibold mb-4 text-blue-700">Instructors</h3>
                
                <div className="space-y-3">
                  <select
                    className="w-full p-2 border rounded"
                    value={selectedInstructor}
                    onChange={(e) => handleInstructorSelect(e.target.value)}
                  >
                    <option value="">Select an instructor</option>
                    {instructors.map(instructor => (
                      <option key={instructor.id} value={instructor.id}>
                        {instructor.name} ({getAssignedClassesCount(instructor.id)} classes)
                      </option>
                    ))}
                  </select>
                  
                  {selectedInstructor && (
                    <div className="mt-4 space-y-3">
                      <button
                        onClick={() => openEditModal(instructors.find(i => i.id === selectedInstructor))}
                        className="w-full py-2 px-4 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
                      >
                        Edit Instructor
                      </button>
                      
                      <button
                        onClick={saveAvailability}
                        className="w-full py-2 px-4 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
                      >
                        Save Changes
                      </button>
                      
                      <button
                        onClick={undoLastChange}
                        className="w-full py-2 px-4 bg-yellow-600 text-white rounded hover:bg-yellow-700 transition-colors"
                      >
                        Undo Last Change
                      </button>
                      
                      <button
                        onClick={() => openDeleteModal(instructors.find(i => i.id === selectedInstructor))}
                        className="w-full py-2 px-4 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
                      >
                        Delete Instructor
                      </button>
                    </div>
                  )}
                </div>
                
                {/* Instructor Stats */}
                {selectedInstructor && (
                  <div className="mt-6">
                    <h4 className="text-md font-semibold mb-2 text-blue-700">Instructor Stats</h4>
                    
                    <div className="space-y-2">
                      <div className="flex justify-between items-center">
                        <span className="text-sm">Assigned Classes:</span>
                        <span className="font-semibold">{getAssignedClassesCount(selectedInstructor)}</span>
                      </div>
                      
                      <div className="flex justify-between items-center">
                        <span className="text-sm">Workload:</span>
                        <span className="font-semibold">{getWorkloadPercentage(selectedInstructor)}%</span>
                      </div>
                      
                      <div className="w-full bg-gray-200 rounded-full h-2.5">
                        <div 
                          className={`h-2.5 rounded-full ${getWorkloadPercentage(selectedInstructor) > 90 ? 'bg-red-600' : 'bg-blue-600'}`}
                          style={{ width: `${getWorkloadPercentage(selectedInstructor)}%` }}
                        ></div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}
            
            {/* Availability Grid */}
            <div className="md:col-span-3 bg-gray-50 p-4 rounded-md">
              {selectedInstructor ? (
                <div>
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-semibold text-blue-700">
                      Availability for {instructors.find(i => i.id === selectedInstructor)?.name}
                    </h3>
                    
                    {!isMobile && (
                      <button
                        onClick={saveAvailability}
                        className="py-2 px-4 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
                      >
                        Save Changes
                      </button>
                    )}
                  </div>
                  
                  <div className="overflow-x-auto">
                    <table className="min-w-full bg-white border border-gray-200">
                      <thead>
                        <tr>
                          <th className="py-2 px-2 md:px-4 border-b text-xs md:text-sm">Time</th>
                          {DAYS_OF_WEEK.map(day => (
                            <th key={day} className="py-2 px-2 md:px-4 border-b text-xs md:text-sm">
                              {isMobile ? day.substring(0, 1) : day}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        {CLASS_TIMES.map(time => (
                          <tr key={time}>
                            <td className="py-1 md:py-2 px-2 md:px-4 border-b border-r font-medium text-xs md:text-sm">
                              {isMobile ? time.replace(':00', '') : time}
                            </td>
                            {DAYS_OF_WEEK.map(day => {
                              const isAvailable = instructorAvailability[day]?.[time] || false;
                              const classType = instructorClassTypes[day]?.[time] || '';
                <tbody>
                  {CLASS_TIMES.map(time => (
                    <tr key={time}>
                      <td className="py-1 md:py-2 px-2 md:px-4 border-b border-r font-medium text-xs md:text-sm">
                        {isMobile ? time.replace(':00', '') : time}
                      </td>
                      {DAYS_OF_WEEK.map(day => {
                        const isAvailable = instructorAvailability[day]?.[time] || false;
                        const classType = instructorClassTypes[day]?.[time] || '';
                        
                        return (
                          <td key={`${day}-${time}`} className="py-1 md:py-2 px-1 md:px-4 border-b border-r">
                            <div className="flex flex-col items-center space-y-1 md:space-y-2">
                              <label className="flex items-center">
                                <input
                                  type="checkbox"
                                  checked={isAvailable}
                                  onChange={(e) => handleAvailabilityChange(day, time, e.target.checked)}
                                  className={`h-4 w-4 md:h-5 md:w-5 rounded border-2 ${getClassTypeColor(classType)}`}
                                />
                              </label>
                              
                              {isAvailable && (
                                <select
                                  value={classType}
                                  onChange={(e) => handleClassTypeChange(day, time, e.target.value)}
                                  className="text-xs p-1 border rounded w-full max-w-[80px]"
                                >
                                  {instructors
                                    .find(i => i.id === selectedInstructor)
                                    ?.classTypes.map(type => (
                                      <option key={type} value={type}>
                                        {isMobile ? type.substring(0, 3) : type}
                                      </option>
                                    ))
                                  }
                                </select>
                              )}
                            </div>
                          </td>
                        );
                      })}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
                Save Availability
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Analytics Section */}
      <div className="mb-8">
        <h3 className="text-lg font-semibold mb-4">Schedule Analytics</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="border rounded-lg p-4 shadow-sm bg-white">
            <h4 className="font-medium mb-3">Instructor Load Distribution</h4>
            <div className="h-64 bg-gray-100 flex items-center justify-center rounded">
              {/* Placeholder for chart */}
              <p className="text-gray-500">Instructor workload chart</p>
            </div>
          </div>
          
          <div className="border rounded-lg p-4 shadow-sm bg-white">
            <h4 className="font-medium mb-3">Class Distribution by Type</h4>
            <div className="h-64 bg-gray-100 flex items-center justify-center rounded">
              {/* Placeholder for chart */}
              <p className="text-gray-500">Class type distribution chart</p>
            </div>
          </div>
        </div>
      </div>
      
      {/* Edit Instructor Modal */}
      {showEditModal && editingInstructor && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-2xl">
            <h3 className="text-lg font-semibold mb-4">
              Edit Instructor: {editingInstructor.name}
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <label className="block text-sm font-medium mb-1">ID:</label>
                <input
                  type="text"
                  name="id"
                  value={editingInstructor.id}
                  className="w-full p-2 border rounded bg-gray-100"
                  disabled
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">Name:</label>
                <input
                  type="text"
                  name="name"
                  value={editingInstructor.name}
                  onChange={handleEditInstructorChange}
                  className="w-full p-2 border rounded"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">Email:</label>
                <input
                  type="email"
                  name="email"
                  value={editingInstructor.email}
                  onChange={handleEditInstructorChange}
                  className="w-full p-2 border rounded"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">Phone:</label>
                <input
                  type="tel"
                  name="phone"
                  value={editingInstructor.phone || ''}
                  onChange={handleEditInstructorChange}
                  className="w-full p-2 border rounded"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">Block Size:</label>
                <input
                  type="number"
                  name="blockSize"
                  value={editingInstructor.blockSize}
                  onChange={handleEditInstructorChange}
                  min="1"
                  max="8"
                  className="w-full p-2 border rounded"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">Min Classes:</label>
                <input
                  type="number"
                  name="minClasses"
                  value={editingInstructor.minClasses}
                  onChange={handleEditInstructorChange}
                  min="0"
                  className="w-full p-2 border rounded"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">Max Classes:</label>
                <input
                  type="number"
                  name="maxClasses"
                  value={editingInstructor.maxClasses}
                  onChange={handleEditInstructorChange}
                  min="1"
                  className="w-full p-2 border rounded"
                />
              </div>
            </div>
            
            <div className="mb-4">
              <label className="block text-sm font-medium mb-2">Class Types:</label>
              <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
                {CLASS_TYPES.map(type => (
                  <div key={type} className="flex items-center">
                    <input
                      type="checkbox"
                      id={`edit-classTypes-${type}`}
                      name={`classTypes-${type}`}
                      checked={editingInstructor.classTypes.includes(type)}
                      onChange={handleEditInstructorChange}
                      className="h-5 w-5 text-blue-600"
                    />
                    <label htmlFor={`edit-classTypes-${type}`} className="ml-2 text-gray-700">{type}</label>
                  </div>
                ))}
              </div>
            </div>
            
            <div className="flex justify-end space-x-3 mt-6">
              <button
                onClick={closeEditModal}
                className="px-4 py-2 border rounded text-gray-600 hover:bg-gray-100"
              >
                Cancel
              </button>
              <button
                onClick={saveInstructor}
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
              >
                Save Changes
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Delete Confirmation Modal */}
      {showDeleteModal && instructorToDelete && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
            <h3 className="text-lg font-semibold mb-4 text-red-600">
              Delete Instructor
            </h3>
            
            <p className="mb-6">
              Are you sure you want to delete instructor <strong>{instructorToDelete.name}</strong>? 
              This action cannot be undone, and any classes assigned to this instructor will be marked as unassigned (TBD).
            </p>
            
            <div className="flex justify-end space-x-3">
              <button
                onClick={closeDeleteModal}
                className="px-4 py-2 border rounded text-gray-600 hover:bg-gray-100"
              >
                Cancel
              </button>
              <button
                onClick={confirmDeleteInstructor}
                className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
              >
                Delete Instructor
              </button>
            </div>
          </div>
        </div>
      )}
      

    </div>
  );
};

export default InstructorManagement;
